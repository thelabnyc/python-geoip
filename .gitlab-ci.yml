variables:
  PLATFORMS: "linux/arm64/v8,linux/amd64"
  DOCKER_BUILDKIT: "1"

.base_job: &base_job
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      variables:
        TAG_SUFFIX: "-mr${CI_MERGE_REQUEST_IID}"
    # No suffux for default branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_REF_PROTECTED == "true"
      variables:
        TAG_SUFFIX: ""

download_db:
  <<: *base_job
  image: ubuntu:latest@sha256:b59d21599a2b151e23eea5f6602f4af4d7d31c4e236d22bf0b62b86d2e386b8f
  script:
    - apt-get update
    - apt-get install -y wget
    - mkdir -p ./data
    - wget "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country&license_key=$MAXMIND_LICENSE_KEY&suffix=tar.gz" -O "data/GeoLite2-Country.mmdb.tar.gz"
    - wget "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key=$MAXMIND_LICENSE_KEY&suffix=tar.gz" -O "data/GeoLite2-City.mmdb.tar.gz"
  artifacts:
    paths:
      - data/*

build:
  <<: *base_job
  needs:
    - job: download_db
      artifacts: true
  image: docker:latest@sha256:d4668861cabc1691635d98e827a81cfa834a416f8fe0f4efc609f9f806d86d82
  services:
    - docker:dind@sha256:bbc590727c1e4fe707877314ff4f0f977bdda2985c485f2b044db0e18979efb3
  script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    - docker pull "${BASE_IMAGE}" || true

    # Install QEMU emulation support in the kernel
    # See: https://docs.docker.com/buildx/working-with-buildx/#build-multi-platform-images
    - docker run --privileged --rm tonistiigi/binfmt --install all

    # Create a buildx instance if one doesn't already exist
    - if [ "$(docker buildx ls | grep docker-container  | wc -l)" -le "0" ]; then
        docker context create buildx-build;
        docker buildx create --use buildx-build;
      fi

    - docker buildx build
        --platform "$PLATFORMS"
        --pull
        --build-arg BASE_IMAGE=$BASE_IMAGE
        --cache-from "${CI_REGISTRY_IMAGE}:${OUTPUT_TAG_NAME}${TAG_SUFFIX}"
        --tag "${CI_REGISTRY_IMAGE}:${OUTPUT_TAG_NAME}${TAG_SUFFIX}"
        --file Dockerfile .
        --push

    - docker buildx build
        --platform "$PLATFORMS"
        --pull
        --build-arg BASE_IMAGE=$BASE_IMAGE
        --build-arg GEOSPATIAL=true
        --cache-from "${CI_REGISTRY_IMAGE}:${OUTPUT_TAG_NAME}${TAG_SUFFIX}"
        --tag "${CI_REGISTRY_IMAGE}:${OUTPUT_TAG_NAME}-geospatial${TAG_SUFFIX}"
        --file Dockerfile .
        --push

  parallel:
    matrix:
      # Python
      - BASE_IMAGE: "registry.gitlab.com/thelabnyc/python:3.11.660@sha256:8c170725365fd943160f72aaf5f39276f8009496bc700f3c2ba5e0412152db39"
        OUTPUT_TAG_NAME: "3.11.${CI_PIPELINE_IID}"

      - BASE_IMAGE: "registry.gitlab.com/thelabnyc/python:3.12.660@sha256:7243952d35dd5642fa4adfa43ef943c52f48e8f7ca05e616e0fa78f7a3ebab41"
        OUTPUT_TAG_NAME: "3.12.${CI_PIPELINE_IID}"

      - BASE_IMAGE: "registry.gitlab.com/thelabnyc/python:3.13.730@sha256:48ead35b07386d36b46420c486875cc8448690219158fd92f221546a6d4d4245"
        OUTPUT_TAG_NAME: "3.13.${CI_PIPELINE_IID}"

      # Python + Node 20
      - BASE_IMAGE: "registry.gitlab.com/thelabnyc/python:3.11.660-node20@sha256:57d5625ff541fe498781cbda3c1253099c3b00b419b04a9f323ad8b143d03bef"
        OUTPUT_TAG_NAME: "3.11.${CI_PIPELINE_IID}-node20"

      - BASE_IMAGE: "registry.gitlab.com/thelabnyc/python:3.12.660-node20@sha256:0e9cdc57214f5587f404bccfc2c0c4553bb1681ec93929a0c479f11bba06f34f"
        OUTPUT_TAG_NAME: "3.12.${CI_PIPELINE_IID}-node20"

      - BASE_IMAGE: "registry.gitlab.com/thelabnyc/python:3.13.730-node20@sha256:fa0b8bf284b4cbe3910584296ba7e16ddd5a4e9a22f5b79ac9e4cf3dba0c8cba"
        OUTPUT_TAG_NAME: "3.13.${CI_PIPELINE_IID}-node20"

      # Python + Node 22
      - BASE_IMAGE: "registry.gitlab.com/thelabnyc/python:3.13.730-node22@sha256:88a9c9fad057608438128e036eb35a0e7c4cce2a232e1ff22c0efb32590a96e3"
        OUTPUT_TAG_NAME: "3.13.${CI_PIPELINE_IID}-node22"
