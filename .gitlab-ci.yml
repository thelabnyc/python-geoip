variables:
  PLATFORMS: "linux/arm64/v8,linux/amd64"
  DOCKER_BUILDKIT: "1"

download_db:
  image: ubuntu:latest
  script:
    - apt-get update
    - apt-get install -y wget
    - mkdir -p ./data
    - wget "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country&license_key=$MAXMIND_LICENSE_KEY&suffix=tar.gz" -O "data/GeoLite2-Country.mmdb.tar.gz"
    - wget "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key=$MAXMIND_LICENSE_KEY&suffix=tar.gz" -O "data/GeoLite2-City.mmdb.tar.gz"
  artifacts:
    paths:
      - data/*

build:
  needs:
    - job: download_db
      artifacts: true

  image: docker:latest
  services:
    - docker:dind

  script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    - docker pull "${BASE_IMAGE}:${PYTHON_VERSION}" || true

    # Install QEMU emulation support in the kernel
    # See: https://docs.docker.com/buildx/working-with-buildx/#build-multi-platform-images
    - docker run --privileged --rm tonistiigi/binfmt --install all

    # Create a buildx instance if one doesn't already exist
    - if [ "$(docker buildx ls | grep docker-container  | wc -l)" -le "0" ]; then
        docker context create buildx-build;
        docker buildx create --use buildx-build;
      fi

    - docker buildx build
        --platform "$PLATFORMS"
        --pull
        --build-arg BASE_IMAGE=$BASE_IMAGE
        --build-arg PYTHON_VERSION=$PYTHON_VERSION
        --cache-from "${CI_REGISTRY_IMAGE}:${OUTPUT_TAG_NAME}"
        --tag "${CI_REGISTRY_IMAGE}:${OUTPUT_TAG_NAME}"
        --file Dockerfile .
        --push

    - docker buildx build
        --platform "$PLATFORMS"
        --pull
        --build-arg BASE_IMAGE=$BASE_IMAGE
        --build-arg PYTHON_VERSION=$PYTHON_VERSION
        --build-arg GEOSPATIAL=true
        --cache-from "${CI_REGISTRY_IMAGE}:${OUTPUT_TAG_NAME}"
        --tag "${CI_REGISTRY_IMAGE}:${OUTPUT_TAG_NAME}-geospatial"
        --file Dockerfile .
        --push

  parallel:
    matrix:
      # Python
      - BASE_IMAGE: registry.gitlab.com/thelabnyc/python:py310
        OUTPUT_TAG_NAME: "3.10"

      - BASE_IMAGE: registry.gitlab.com/thelabnyc/python:py311
        OUTPUT_TAG_NAME: "3.11"

      - BASE_IMAGE: registry.gitlab.com/thelabnyc/python:py312
        OUTPUT_TAG_NAME: "3.12"

      # Python + Node 20
      - BASE_IMAGE: registry.gitlab.com/thelabnyc/python:py310-node20
        OUTPUT_TAG_NAME: "3.10-node20"

      - BASE_IMAGE: registry.gitlab.com/thelabnyc/python:py311-node20
        OUTPUT_TAG_NAME: "3.11-node20"

      - BASE_IMAGE: registry.gitlab.com/thelabnyc/python:py312-node20
        OUTPUT_TAG_NAME: "3.12-node20"
