variables:
  PLATFORMS: "linux/arm64/v8,linux/amd64"
  DOCKER_BUILDKIT: "1"

download_db:
  image: ubuntu:latest@sha256:1e622c5f073b4f6bfad6632f2616c7f59ef256e96fe78bf6a595d1dc4376ac02
  script:
    - apt-get update
    - apt-get install -y wget
    - mkdir -p ./data
    - wget "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country&license_key=$MAXMIND_LICENSE_KEY&suffix=tar.gz" -O "data/GeoLite2-Country.mmdb.tar.gz"
    - wget "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key=$MAXMIND_LICENSE_KEY&suffix=tar.gz" -O "data/GeoLite2-City.mmdb.tar.gz"
  artifacts:
    paths:
      - data/*

build:
  needs:
    - job: download_db
      artifacts: true

  image: docker:latest@sha256:f49e1c71b5d9f8ebe53715f78996ce42b8be4b1ec03875d187dfe3c03de1dc00
  services:
    - docker:dind@sha256:f49e1c71b5d9f8ebe53715f78996ce42b8be4b1ec03875d187dfe3c03de1dc00

  script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    - docker pull "${BASE_IMAGE}" || true

    # Install QEMU emulation support in the kernel
    # See: https://docs.docker.com/buildx/working-with-buildx/#build-multi-platform-images
    - docker run --privileged --rm tonistiigi/binfmt --install all

    # Create a buildx instance if one doesn't already exist
    - if [ "$(docker buildx ls | grep docker-container  | wc -l)" -le "0" ]; then
        docker context create buildx-build;
        docker buildx create --use buildx-build;
      fi

    - docker buildx build
        --platform "$PLATFORMS"
        --pull
        --build-arg BASE_IMAGE=$BASE_IMAGE
        --cache-from "${CI_REGISTRY_IMAGE}:${OUTPUT_TAG_NAME}"
        --tag "${CI_REGISTRY_IMAGE}:${OUTPUT_TAG_NAME}"
        --file Dockerfile .
        --push

    - docker buildx build
        --platform "$PLATFORMS"
        --pull
        --build-arg BASE_IMAGE=$BASE_IMAGE
        --build-arg GEOSPATIAL=true
        --cache-from "${CI_REGISTRY_IMAGE}:${OUTPUT_TAG_NAME}"
        --tag "${CI_REGISTRY_IMAGE}:${OUTPUT_TAG_NAME}-geospatial"
        --file Dockerfile .
        --push

  parallel:
    matrix:
      # Python
      - BASE_IMAGE: "registry.gitlab.com/thelabnyc/python:py311@sha256:8cc8e7c29b912657a20f28b602a1dd5347414e49a48e884a7698d6f2f27abe41"
        OUTPUT_TAG_NAME: "3.11"

      - BASE_IMAGE: "registry.gitlab.com/thelabnyc/python:py312@sha256:e0110fadeaa14e99088d40550bfb40248709d6d1dd1c380546f2597a6d3ebb66"
        OUTPUT_TAG_NAME: "3.12"

      - BASE_IMAGE: "registry.gitlab.com/thelabnyc/python:py313@sha256:6a8762e21fdb1daa3152d5bff2d4a9e1d2a8e438f5ac352f50b15629c01e0db3"
        OUTPUT_TAG_NAME: "3.13"

      # Python + Node 20
      - BASE_IMAGE: "registry.gitlab.com/thelabnyc/python:py311-node20@sha256:67a42708bdb812fa0a80acaa6c6816e9e0079bb9c7c0fa36657f0a032d20d6aa"
        OUTPUT_TAG_NAME: "3.11-node20"

      - BASE_IMAGE: "registry.gitlab.com/thelabnyc/python:py312-node20@sha256:c5f151ad8931d5df9158c4c3936b353846416d8bb48153b40fe96ab91137fb83"
        OUTPUT_TAG_NAME: "3.12-node20"

      - BASE_IMAGE: "registry.gitlab.com/thelabnyc/python:py313-node20@sha256:61396ae5a58179f7a2ebec426e2cbe9178c93901a843550ad71d686a4b2936c2"
        OUTPUT_TAG_NAME: "3.13-node20"

      # Python + Node 22
      - BASE_IMAGE: "registry.gitlab.com/thelabnyc/python:py313-node22@sha256:2ad91b86a4129773b4ca2bd2137099c65c4773d2fa8ff751663b0089557ba061"
        OUTPUT_TAG_NAME: "3.13-node22"
