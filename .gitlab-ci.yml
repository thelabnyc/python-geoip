variables:
  PLATFORMS: "linux/arm64/v8,linux/amd64"
  DOCKER_BUILDKIT: "1"

.base_job: &base_job
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      variables:
        TAG_SUFFIX: "-mr${CI_MERGE_REQUEST_IID}"
    # No suffux for default branch
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_REF_PROTECTED == "true"
      variables:
        TAG_SUFFIX: ""

download_db:
  <<: *base_job
  image: ubuntu:latest@sha256:1e622c5f073b4f6bfad6632f2616c7f59ef256e96fe78bf6a595d1dc4376ac02
  script:
    - apt-get update
    - apt-get install -y wget
    - mkdir -p ./data
    - wget "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country&license_key=$MAXMIND_LICENSE_KEY&suffix=tar.gz" -O "data/GeoLite2-Country.mmdb.tar.gz"
    - wget "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-City&license_key=$MAXMIND_LICENSE_KEY&suffix=tar.gz" -O "data/GeoLite2-City.mmdb.tar.gz"
  artifacts:
    paths:
      - data/*

build:
  <<: *base_job
  needs:
    - job: download_db
      artifacts: true
  image: docker:latest@sha256:f49e1c71b5d9f8ebe53715f78996ce42b8be4b1ec03875d187dfe3c03de1dc00
  services:
    - docker:dind@sha256:f49e1c71b5d9f8ebe53715f78996ce42b8be4b1ec03875d187dfe3c03de1dc00
  script:
    - docker login -u "${CI_REGISTRY_USER}" -p "${CI_JOB_TOKEN}" "${CI_REGISTRY}"
    - docker pull "${BASE_IMAGE}" || true

    # Install QEMU emulation support in the kernel
    # See: https://docs.docker.com/buildx/working-with-buildx/#build-multi-platform-images
    - docker run --privileged --rm tonistiigi/binfmt --install all

    # Create a buildx instance if one doesn't already exist
    - if [ "$(docker buildx ls | grep docker-container  | wc -l)" -le "0" ]; then
        docker context create buildx-build;
        docker buildx create --use buildx-build;
      fi

    - docker buildx build
        --platform "$PLATFORMS"
        --pull
        --build-arg BASE_IMAGE=$BASE_IMAGE
        --cache-from "${CI_REGISTRY_IMAGE}:${OUTPUT_TAG_NAME}${TAG_SUFFIX}"
        --tag "${CI_REGISTRY_IMAGE}:${OUTPUT_TAG_NAME}${TAG_SUFFIX}"
        --file Dockerfile .
        --push

    - docker buildx build
        --platform "$PLATFORMS"
        --pull
        --build-arg BASE_IMAGE=$BASE_IMAGE
        --build-arg GEOSPATIAL=true
        --cache-from "${CI_REGISTRY_IMAGE}:${OUTPUT_TAG_NAME}${TAG_SUFFIX}"
        --tag "${CI_REGISTRY_IMAGE}:${OUTPUT_TAG_NAME}-geospatial${TAG_SUFFIX}"
        --file Dockerfile .
        --push

  parallel:
    matrix:
      # Python
      - BASE_IMAGE: "registry.gitlab.com/thelabnyc/python:py311@sha256:96aea2b95bcd4835f6f07ac1540dcba3199a27c7b17c720023374c1be305865d"
        OUTPUT_TAG_NAME: "3.11"

      - BASE_IMAGE: "registry.gitlab.com/thelabnyc/python:py312@sha256:6d5079f69b7146ce732192952f888ed440c15b74c4416753fd276257cc6f7cbc"
        OUTPUT_TAG_NAME: "3.12"

      - BASE_IMAGE: "registry.gitlab.com/thelabnyc/python:py313@sha256:06acdbcbdbcab477a36d268b35fecaa79d1632422bb4547058610531248ce76a"
        OUTPUT_TAG_NAME: "3.13"

      # Python + Node 20
      - BASE_IMAGE: "registry.gitlab.com/thelabnyc/python:py311-node20@sha256:4ac4b72dc4c7b4cb0bfe49e88afba278bc318913659f087c133a69f4233d2f48"
        OUTPUT_TAG_NAME: "3.11-node20"

      - BASE_IMAGE: "registry.gitlab.com/thelabnyc/python:py312-node20@sha256:7ddf52f104597a338995d35f837f92aca7b49259dc56071226a8a479a8c75ce8"
        OUTPUT_TAG_NAME: "3.12-node20"

      - BASE_IMAGE: "registry.gitlab.com/thelabnyc/python:py313-node20@sha256:f0a562f54520f148e8507896c55db12e586f37953b16b59bc9c6f1b357c535e7"
        OUTPUT_TAG_NAME: "3.13-node20"

      # Python + Node 22
      - BASE_IMAGE: "registry.gitlab.com/thelabnyc/python:py313-node22@sha256:6883fd3adc8160b83354a26b2503b2d95d96827c1f7b3b8869b6566bbcdf4561"
        OUTPUT_TAG_NAME: "3.13-node22"
